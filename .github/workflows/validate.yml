name: Validation

on:
  workflow_run:
    workflows: ["Build"]
    types: [completed]
    branches: [main]

permissions:
  contents: read

env:
  GO_VERSION: '1.25'

jobs:
  # Cross-Platform Integration Validation
  validate-integration:
    name: Integration (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    strategy:
      matrix:
        include:
          - platform: linux-amd64
            os: ubuntu-latest
            artifact: zen-linux-amd64
            binary: zen-linux-amd64
          - platform: darwin-arm64
            os: macos-latest
            artifact: zen-darwin-arm64
            binary: zen-darwin-arm64
          - platform: windows-amd64
            os: windows-latest
            artifact: zen-windows-amd64
            binary: zen-windows-amd64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: bin/
        run-id: ${{ github.event.workflow_run.id }}

    - name: Make binary executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x bin/${{ matrix.binary }}

    - name: Basic functionality test
      shell: bash
      run: |
        echo "Testing ${{ matrix.platform }} binary..."

        # Test version command
        ./bin/${{ matrix.binary }} version

        # Test help command
        ./bin/${{ matrix.binary }} --help

        # Test invalid command (should fail gracefully)
        ./bin/${{ matrix.binary }} nonexistent-command || true

        echo "✓ Basic functionality validated for ${{ matrix.platform }}"

    - name: Integration workflow test
      shell: bash
      env:
        ZEN_BINARY_PATH: ${{ github.workspace }}/bin/${{ matrix.binary }}
      run: |
        echo "Running integration workflow tests..."

        # Test common CLI workflows
        echo "1. Testing help system..."
        $ZEN_BINARY_PATH --help | grep -q "zen" || exit 1

        echo "2. Testing version output..."
        $ZEN_BINARY_PATH version | grep -q "zen" || exit 1

        # Add more integration tests as they're available
        echo "!  Extended integration tests not yet implemented"
        echo "✓ Available integration tests passed"

  # Installation Validation
  validate-installation:
    name: Installation Test (${{ matrix.platform }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 8
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    strategy:
      matrix:
        include:
          - platform: ubuntu
            os: ubuntu-latest
            artifact: zen-linux-amd64
            binary: zen-linux-amd64
          - platform: macos
            os: macos-latest
            artifact: zen-darwin-arm64
            binary: zen-darwin-arm64
          - platform: windows
            os: windows-latest
            artifact: zen-windows-amd64
            binary: zen-windows-amd64.exe

    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: bin/
        run-id: ${{ github.event.workflow_run.id }}

    - name: Test installation process
      shell: bash
      run: |
        echo "Testing installation process on ${{ matrix.platform }}..."

        # Make executable
        if [ "${{ runner.os }}" != "Windows" ]; then
          chmod +x bin/${{ matrix.binary }}
        fi

        # Test binary can be moved and executed
        mkdir -p test-install
        cp bin/${{ matrix.binary }} test-install/

        # Test execution from different directory
        cd test-install
        ./${{ matrix.binary }} version

        echo "✓ Installation process validated"

  # Performance Validation
  validate-performance:
    name: Performance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: zen-linux-amd64
        path: bin/
        run-id: ${{ github.event.workflow_run.id }}

    - name: Make binary executable
      run: chmod +x bin/zen-linux-amd64

    - name: Performance benchmarks
      run: |
        echo "Running performance validation..."

        # Test startup time (should be fast for CLI)
        echo "Testing startup time..."
        time_start=$(date +%s%N)
        ./bin/zen-linux-amd64 version > /dev/null
        time_end=$(date +%s%N)
        startup_time=$(( (time_end - time_start) / 1000000 ))

        echo "Startup time: ${startup_time}ms"

        # CLI should start quickly (under 500ms)
        if [ $startup_time -gt 500 ]; then
          echo "! Startup time exceeds 500ms threshold: ${startup_time}ms"
        else
          echo "✓ Startup time within acceptable range: ${startup_time}ms"
        fi

        # Test help command performance
        echo "Testing help command performance..."
        time_start=$(date +%s%N)
        ./bin/zen-linux-amd64 --help > /dev/null
        time_end=$(date +%s%N)
        help_time=$(( (time_end - time_start) / 1000000 ))

        echo "Help command time: ${help_time}ms"

        if [ $help_time -gt 200 ]; then
          echo "! Help command exceeds 200ms threshold: ${help_time}ms"
        else
          echo "✓ Help command performance acceptable: ${help_time}ms"
        fi

    - name: Memory usage validation
      run: |
        echo "Testing memory usage..."

        # Basic memory usage test
        /usr/bin/time -v ./bin/zen-linux-amd64 version 2>&1 | grep "Maximum resident set size" || echo "Memory info not available"

        echo "✓ Memory usage validation completed"

  # Validation Summary
  validation-summary:
    name: Validation Summary
    needs: [validate-integration, validate-installation, validate-performance]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Generate validation summary
      run: |
        echo "#Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Cross-Platform Integration" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Linux amd64 | ${{ needs.validate-integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS arm64 | ${{ needs.validate-integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows amd64 | ${{ needs.validate-integration.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Installation Testing" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Installation | ${{ needs.validate-installation.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.validate-performance.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All validation tests completed. Check individual job results for details." >> $GITHUB_STEP_SUMMARY
